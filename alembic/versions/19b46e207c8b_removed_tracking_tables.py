"""removed tracking tables

Revision ID: 19b46e207c8b
Revises: e6ce74b1dbd9
Create Date: 2025-06-25 20:24:02.494047

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '19b46e207c8b'
down_revision: Union[str, None] = 'e6ce74b1dbd9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_processing_error_entity_id'), table_name='processingerror')
    op.drop_index(op.f('ix_processing_error_tenant'), table_name='processingerror')
    op.drop_index(op.f('ix_processing_error_type'), table_name='processingerror')
    op.drop_table('processingerror')
    op.drop_index(op.f('ix_state_transition_entity_id'), table_name='statetransition')
    op.drop_index(op.f('ix_state_transition_entity_tenant'), table_name='statetransition')
    op.drop_index(op.f('ix_state_transition_sequence'), table_name='statetransition')
    op.drop_index(op.f('ix_state_transition_tenant'), table_name='statetransition')
    op.drop_index(op.f('ix_state_transition_to_state'), table_name='statetransition')
    op.drop_table('statetransition')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('statetransition',
    sa.Column('entity_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('from_state', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('to_state', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('actor', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('transition_type', sa.VARCHAR(length=8), autoincrement=False, nullable=False),
    sa.Column('processor_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Processor-specific data about the transition'),
    sa.Column('queue_source', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Queue from which the message was received'),
    sa.Column('queue_destination', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Queue to which the message was sent'),
    sa.Column('transition_duration', sa.INTEGER(), autoincrement=False, nullable=True, comment='Time (in ms) spent in the previous state'),
    sa.Column('sequence_number', sa.BIGINT(), autoincrement=False, nullable=True, comment='Sequence number for ordering transitions'),
    sa.Column('tenant_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name=op.f('statetransition_entity_id_fkey')),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenant.tenant_id'], name=op.f('statetransition_tenant_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('statetransition_pkey'))
    )
    op.create_index(op.f('ix_state_transition_to_state'), 'statetransition', ['to_state'], unique=False)
    op.create_index(op.f('ix_state_transition_tenant'), 'statetransition', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_state_transition_sequence'), 'statetransition', ['entity_id', 'sequence_number'], unique=False)
    op.create_index(op.f('ix_state_transition_entity_tenant'), 'statetransition', ['entity_id', 'tenant_id'], unique=False)
    op.create_index(op.f('ix_state_transition_entity_id'), 'statetransition', ['entity_id'], unique=False)
    op.create_table('processingerror',
    sa.Column('entity_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('error_type_code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('processing_step', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('stack_trace', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name=op.f('processingerror_entity_id_fkey')),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenant.tenant_id'], name=op.f('processingerror_tenant_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('processingerror_pkey'))
    )
    op.create_index(op.f('ix_processing_error_type'), 'processingerror', ['error_type_code'], unique=False)
    op.create_index(op.f('ix_processing_error_tenant'), 'processingerror', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_processing_error_entity_id'), 'processingerror', ['entity_id'], unique=False)
    # ### end Alembic commands ###
